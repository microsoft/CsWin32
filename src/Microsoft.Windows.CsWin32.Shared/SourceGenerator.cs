// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Windows.CsWin32
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Text.Json;
    using System.Threading;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.Diagnostics;
    using Microsoft.CodeAnalysis.Text;

    /// <summary>
    /// Generates the source code for the p/invoke methods and supporting types into some C# project.
    /// </summary>
    [Generator]
#if ROSLYN4_0
    public class SourceGenerator : IIncrementalGenerator
#else
    public class SourceGenerator : ISourceGenerator
#endif
    {
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public static readonly DiagnosticDescriptor InternalError = new DiagnosticDescriptor(
            "PInvoke000",
            "CsWin32InternalError",
            "An internal error occurred: {0}",
            "Functionality",
            DiagnosticSeverity.Error,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor NoMatchingMethodOrType = new DiagnosticDescriptor(
            "PInvoke001",
            "No matching method, type or constant found",
            "Method, type or constant \"{0}\" not found",
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor NoMatchingMethodOrTypeWithSuggestions = new DiagnosticDescriptor(
            "PInvoke001",
            "No matching method, type or constant found",
#pragma warning disable RS1032 // Define diagnostic message correctly
            "Method, type or constant \"{0}\" not found. Did you mean {1}?",
#pragma warning restore RS1032 // Define diagnostic message correctly
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor NoMethodsForModule = new DiagnosticDescriptor(
            "PInvoke001",
            "No module found",
            "No methods found under module \"{0}\"",
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor UnsafeCodeRequired = new DiagnosticDescriptor(
            "PInvoke002",
            "AllowUnsafeCode",
            "AllowUnsafeBlocks must be set to 'true' in the project file for many APIs. Compiler errors may result.",
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: "Many generated types or P/Invoke methods require use of pointers, so the receiving compilation must allow unsafe code.");

        public static readonly DiagnosticDescriptor BannedApi = new DiagnosticDescriptor(
            "PInvoke003",
            "BannedAPI",
            "This API will not be generated: {0}",
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor UseEnumValueDeclaringType = new DiagnosticDescriptor(
            "PInvoke004",
            "UseEnumDeclaringType",
            "Use the name of the enum that declares this constant: {0}",
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true,
            description: "Constants that are defined within enums should be generated by requesting the name of their declaring enum instead.");

        public static readonly DiagnosticDescriptor CpuArchitectureIncompatibility = new DiagnosticDescriptor(
            "PInvoke005",
            "TargetSpecificCpuArchitecture",
            "This API is only available when targeting a specific CPU architecture. AnyCPU cannot generate this API.",
            "Functionality",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor DocParsingError = new DiagnosticDescriptor(
            "PInvoke006",
            "DocsParseError",
            "An error occurred while reading docs file: \"{0}\": {1}",
            "Configuration",
            DiagnosticSeverity.Warning,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor AmbiguousMatchError = new DiagnosticDescriptor(
            "PInvoke007",
            "AmbiguousMatch",
            "The API \"{0}\" is ambiguous",
            "Functionality",
            DiagnosticSeverity.Error,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor AmbiguousMatchErrorWithSuggestions = new DiagnosticDescriptor(
            "PInvoke007",
            "AmbiguousMatch",
#pragma warning disable RS1032 // Define diagnostic message correctly
            "The API \"{0}\" is ambiguous. Please specify one of: {1}",
#pragma warning restore RS1032 // Define diagnostic message correctly
            "Functionality",
            DiagnosticSeverity.Error,
            isEnabledByDefault: true);

        public static readonly DiagnosticDescriptor OptionsParsingError = new DiagnosticDescriptor(
            "PInvoke008",
            "BadOptions",
            "An error occurred while parsing \"{0}\": {1}",
            "Configuration",
            DiagnosticSeverity.Error,
            isEnabledByDefault: true);
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

        private const string NativeMethodsTxtAdditionalFileName = "NativeMethods.txt";
        private const string NativeMethodsJsonAdditionalFileName = "NativeMethods.json";

#if ROSLYN4_0

        /// <inheritdoc/>
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var configFiles = context.AdditionalTextsProvider.Collect().Select(
                static (additionalFiles, cancellationToken) =>
                {
                    AdditionalText? nativeMethodsJsonFile = GetNativeMethodsJsonFile(additionalFiles);
                    AdditionalText? nativeMethodsTxtFile = GetNativeMethodsTxtFile(additionalFiles);

                    return (nativeMethodsJsonFile, nativeMethodsTxtFile);
                });

            var globalConfig = context.AnalyzerConfigOptionsProvider.Select(
                static (analyzerConfigOptions, cancellationToken) =>
                {
                    string? inputMetadataPaths = TryGetInputMetadataPaths(analyzerConfigOptions);
                    string? inputDocPaths = TryGetInputDocPaths(analyzerConfigOptions);

                    return (inputMetadataPaths, inputDocPaths);
                });

            var languageVersion = context.ParseOptionsProvider.Select((parseOptions, _) => (parseOptions as CSharpParseOptions)?.LanguageVersion);

            var inputs = context.CompilationProvider
                .Combine(languageVersion)
                .Combine(configFiles)
                .Combine(globalConfig)
                .Select((data, cancellationToken) => (compilation: data.Left.Left.Left, languageVersion: data.Left.Left.Right, additionalFiles: data.Left.Right, analyzerConfigOptions: data.Right));

            context.RegisterSourceOutput(
                inputs,
                (context, collectedValues) =>
                {
                    Execute(
                        context,
                        static (context, diagnostic) => context.ReportDiagnostic(diagnostic),
                        static (context, hintName, source) => context.AddSource(hintName, source),
                        (CSharpCompilation)collectedValues.compilation,
                        collectedValues.languageVersion,
                        collectedValues.additionalFiles.nativeMethodsJsonFile,
                        collectedValues.additionalFiles.nativeMethodsTxtFile,
                        collectedValues.analyzerConfigOptions.inputMetadataPaths,
                        collectedValues.analyzerConfigOptions.inputDocPaths,
                        context.CancellationToken);
                });
        }

#else

        /// <inheritdoc/>
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        /// <inheritdoc/>
        public void Execute(GeneratorExecutionContext context)
        {
            AdditionalText? nativeMethodsJsonFile = GetNativeMethodsJsonFile(context.AdditionalFiles);
            AdditionalText? nativeMethodsTxtFile = GetNativeMethodsTxtFile(context.AdditionalFiles);
            string? inputMetadataPaths = TryGetInputMetadataPaths(context.AnalyzerConfigOptions);
            string? inputDocPaths = TryGetInputDocPaths(context.AnalyzerConfigOptions);

            Execute(
                context,
                static (context, diagnostic) => context.ReportDiagnostic(diagnostic),
                static (context, hintName, source) => context.AddSource(hintName, source),
                (CSharpCompilation)context.Compilation,
                (context.ParseOptions as CSharpParseOptions)?.LanguageVersion,
                nativeMethodsJsonFile,
                nativeMethodsTxtFile,
                inputMetadataPaths,
                inputDocPaths,
                context.CancellationToken);
        }

#endif

        private static AdditionalText? GetNativeMethodsJsonFile(ImmutableArray<AdditionalText> additionalFiles)
        {
            return additionalFiles.FirstOrDefault(af => string.Equals(Path.GetFileName(af.Path), NativeMethodsJsonAdditionalFileName, StringComparison.OrdinalIgnoreCase));
        }

        private static AdditionalText? GetNativeMethodsTxtFile(ImmutableArray<AdditionalText> additionalFiles)
        {
            return additionalFiles.FirstOrDefault(af => string.Equals(Path.GetFileName(af.Path), NativeMethodsTxtAdditionalFileName, StringComparison.OrdinalIgnoreCase));
        }

        private static string? TryGetInputMetadataPaths(AnalyzerConfigOptionsProvider analyzerConfigOptions)
        {
            analyzerConfigOptions.GlobalOptions.TryGetValue("build_property.CsWin32InputMetadataPaths", out string? inputMetadataPaths);
            return inputMetadataPaths;
        }

        private static string? TryGetInputDocPaths(AnalyzerConfigOptionsProvider analyzerConfigOptions)
        {
            analyzerConfigOptions.GlobalOptions.TryGetValue("build_property.CsWin32InputDocPaths", out string? inputDocPaths);
            return inputDocPaths;
        }

        private static void Execute<TContext>(
            TContext context,
            Action<TContext, Diagnostic> reportDiagnostic,
            Action<TContext, string, string> addSource,
            CSharpCompilation compilation,
            LanguageVersion? languageVersion,
            AdditionalText? nativeMethodsJsonFile,
            AdditionalText? nativeMethodsTxtFile,
            string? inputMetadataPaths,
            string? inputDocPaths,
            CancellationToken cancellationToken)
        {
            GeneratorOptions? options = null;
            if (nativeMethodsJsonFile is object)
            {
                string optionsJson = nativeMethodsJsonFile.GetText(cancellationToken)!.ToString();
                try
                {
                    options = JsonSerializer.Deserialize<GeneratorOptions>(optionsJson, new JsonSerializerOptions
                    {
                        AllowTrailingCommas = true,
                        ReadCommentHandling = JsonCommentHandling.Skip,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    });
                }
                catch (JsonException ex)
                {
                    reportDiagnostic(context, Diagnostic.Create(OptionsParsingError, location: null, nativeMethodsJsonFile.Path, ex.Message));
                    return;
                }
            }
            else
            {
                options = new GeneratorOptions();
            }

            if (nativeMethodsTxtFile is null)
            {
                return;
            }

            if (!compilation.Options.AllowUnsafe)
            {
                reportDiagnostic(context, Diagnostic.Create(UnsafeCodeRequired, location: null));
            }

            Docs? docs = ParseDocs(context, reportDiagnostic, inputDocPaths);
            IReadOnlyList<Generator> generators = CollectMetadataPaths(inputMetadataPaths).Select(path => new Generator(path, docs, options, compilation, languageVersion)).ToList();
            try
            {
                SuperGenerator.Combine(generators);
                SourceText? nativeMethodsTxt = nativeMethodsTxtFile.GetText(cancellationToken);
                if (nativeMethodsTxt is null)
                {
                    return;
                }

                foreach (TextLine line in nativeMethodsTxt.Lines)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    string name = line.ToString();
                    if (string.IsNullOrWhiteSpace(name) || name.StartsWith("//", StringComparison.InvariantCulture))
                    {
                        continue;
                    }

                    name = name.Trim();
                    var location = Location.Create(nativeMethodsTxtFile.Path, line.Span, nativeMethodsTxt.Lines.GetLinePositionSpan(line.Span));
                    try
                    {
                        if (Generator.GetBannedAPIs(options).TryGetValue(name, out string? reason))
                        {
                            reportDiagnostic(context, Diagnostic.Create(BannedApi, location, reason));
                            continue;
                        }

                        if (name.EndsWith(".*", StringComparison.Ordinal))
                        {
                            var moduleName = name.Substring(0, name.Length - 2);
                            int matches = 0;
                            foreach (Generator generator in generators)
                            {
                                if (generator.TryGenerateAllExternMethods(moduleName, cancellationToken))
                                {
                                    matches++;
                                }
                            }

                            switch (matches)
                            {
                                case 0:
                                    reportDiagnostic(context, Diagnostic.Create(NoMethodsForModule, location, moduleName));
                                    break;
                                case > 1:
                                    reportDiagnostic(context, Diagnostic.Create(AmbiguousMatchError, location, moduleName));
                                    break;
                            }

                            continue;
                        }

                        List<string> matchingApis = new();
                        foreach (Generator generator in generators)
                        {
                            if (generator.TryGenerate(name, out IReadOnlyList<string> preciseApi, cancellationToken))
                            {
                                matchingApis.AddRange(preciseApi);
                                continue;
                            }

                            matchingApis.AddRange(preciseApi);
                            if (generator.TryGetEnumName(name, out string? declaringEnum))
                            {
                                reportDiagnostic(context, Diagnostic.Create(UseEnumValueDeclaringType, location, declaringEnum));
                                generator.TryGenerate(declaringEnum, out preciseApi, cancellationToken);
                                matchingApis.AddRange(preciseApi);
                            }
                        }

                        switch (matchingApis.Count)
                        {
                            case 0:
                                ReportNoMatch(location, name);
                                break;
                            case > 1:
                                reportDiagnostic(context, Diagnostic.Create(AmbiguousMatchErrorWithSuggestions, location, name, ConcatSuggestions(matchingApis)));
                                break;
                        }
                    }
                    catch (GenerationFailedException ex)
                    {
                        if (Generator.IsPlatformCompatibleException(ex))
                        {
                            reportDiagnostic(context, Diagnostic.Create(CpuArchitectureIncompatibility, location));
                        }
                        else
                        {
                            // Build up a complete error message.
                            reportDiagnostic(context, Diagnostic.Create(InternalError, location, AssembleFullExceptionMessage(ex)));
                        }
                    }
                }

                foreach (Generator generator in generators)
                {
                    var compilationUnits = generator.GetCompilationUnits(cancellationToken)
                        .OrderBy(pair => pair.Key, StringComparer.OrdinalIgnoreCase)
                        .ThenBy(pair => pair.Key, StringComparer.Ordinal);
                    foreach (var unit in compilationUnits)
                    {
                        addSource(context, $"{generator.InputAssemblyName}.{unit.Key}", unit.Value.ToFullString());
                    }
                }

                string ConcatSuggestions(IReadOnlyList<string> suggestions)
                {
                    var suggestionBuilder = new StringBuilder();
                    for (int i = 0; i < suggestions.Count; i++)
                    {
                        if (i > 0)
                        {
                            suggestionBuilder.Append(i < suggestions.Count - 1 ? ", " : " or ");
                        }

                        suggestionBuilder.Append('"');
                        suggestionBuilder.Append(suggestions[i]);
                        suggestionBuilder.Append('"');
                    }

                    return suggestionBuilder.ToString();
                }

                void ReportNoMatch(Location? location, string failedAttempt)
                {
                    List<string> suggestions = new();
                    foreach (Generator generator in generators)
                    {
                        suggestions.AddRange(generator.GetSuggestions(failedAttempt).Take(4));
                    }

                    if (suggestions.Count > 0)
                    {
                        reportDiagnostic(context, Diagnostic.Create(NoMatchingMethodOrTypeWithSuggestions, location, failedAttempt, ConcatSuggestions(suggestions)));
                    }
                    else
                    {
                        reportDiagnostic(context, Diagnostic.Create(NoMatchingMethodOrType, location, failedAttempt));
                    }
                }
            }
            finally
            {
                foreach (Generator generator in generators)
                {
                    generator.Dispose();
                }
            }
        }

        private static string AssembleFullExceptionMessage(Exception ex)
        {
            var sb = new StringBuilder();

            Exception? inner = ex;
            while (inner is object)
            {
                sb.Append(inner.Message);
                if (sb.Length > 0 && sb[sb.Length - 1] != '.')
                {
                    sb.Append('.');
                }

                sb.Append(' ');
                inner = inner.InnerException;
            }

            return sb.ToString();
        }

        private static IReadOnlyList<string> CollectMetadataPaths(string? delimitedMetadataBasePaths)
        {
            if (string.IsNullOrWhiteSpace(delimitedMetadataBasePaths))
            {
                return Array.Empty<string>();
            }

            string[] metadataBasePaths = delimitedMetadataBasePaths!.Split('|');
            return metadataBasePaths;
        }

        private static Docs? ParseDocs<TContext>(TContext context, Action<TContext, Diagnostic> reportDiagnostic, string? delimitedApiDocsPaths)
        {
            Docs? docs = null;
            if (!string.IsNullOrWhiteSpace(delimitedApiDocsPaths))
            {
                string[] apiDocsPaths = delimitedApiDocsPaths!.Split('|');
                if (apiDocsPaths.Length > 0)
                {
                    List<Docs> docsList = new(apiDocsPaths.Length);
                    foreach (string path in apiDocsPaths)
                    {
                        try
                        {
                            docsList.Add(Docs.Get(path));
                        }
                        catch (Exception e)
                        {
                            reportDiagnostic(context, Diagnostic.Create(DocParsingError, null, path, e.Message));
                        }
                    }

                    docs = Docs.Merge(docsList);
                }
            }

            return docs;
        }
    }
}
