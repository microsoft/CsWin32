// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable CS1591,CS1573,CS0465,CS0649,CS8019,CS1570,CS1584,CS1658
namespace Windows.Win32
{
	using global::System;
	using global::System.Diagnostics;
	using global::System.Runtime.CompilerServices;
	using global::System.Runtime.InteropServices;
	using win32 = global::Windows.Win32;

	namespace Foundation
	{
		[DebuggerDisplay("{Value}")]
		internal unsafe readonly partial struct PWSTR
			: IEquatable<PWSTR>
		{
			internal readonly char* Value;
			internal PWSTR(char* value) => this.Value = value;
			public static implicit operator char*(PWSTR value) => value.Value;
			public static implicit operator PWSTR(char* value) => new PWSTR(value);
			public static bool operator ==(PWSTR left, PWSTR right) => left.Value == right.Value;
			public static bool operator !=(PWSTR left, PWSTR right) => !(left == right);

			public bool Equals(PWSTR other) => this.Value == other.Value;

			public override bool Equals(object obj) => obj is PWSTR other && this.Equals(other);

			public override int GetHashCode() => checked((int)this.Value);

			internal int Length
			{
				get
				{
					char* p = this.Value;
					if (p is null)
						return 0;
					while (*p != 0)
						p++;
					return checked((int)(p - this.Value));
				}
			}

			public override string ToString() => this.Value is null ? null : new string(this.Value);

			internal Span<char> AsSpan() => this.Value is null ? default(Span<char>) : new Span<char>(this.Value, this.Length);
		}
	}
}
