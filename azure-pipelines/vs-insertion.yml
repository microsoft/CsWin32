trigger: none # We only want to trigger manually or based on resources
pr: none

resources:
  repositories:
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release
  pipelines:
  - pipeline: CI
    source: CsWin32
    tags:
    - Real signed
    trigger:
      tags:
      - Real signed
      - auto-insertion

variables:
- template: GlobalVariables.yml

extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      sourceAnalysisPool: VSEngSS-MicroBuild2022-1ES

    stages:
    - stage: insertion
      jobs:
      - job: insertion
        displayName: VS insertion
        pool: VSEngSS-MicroBuild2022-1ES
        templateContext:
          outputParentDirectory: $(Pipeline.Workspace)/CI
        steps:
        - checkout: none
        - powershell: Write-Host "##vso[build.updatebuildnumber]$(resources.pipeline.CI.runName)"
          displayName: ‚öôÔ∏è Set pipeline name
        - template: azure-pipelines/release-deployment-prep.yml@self
        - download: CI
          artifact: VSInsertion-Windows
          displayName: üîª Download VSInsertion-Windows artifact
        - ${{ if eq(variables['ContainsVsix'], 'true') }}:
          - task: 1ES.MicroBuildVstsDrop@1
            displayName: üî∫ Upload VSTS Drop
            inputs:
              dropFolder: $(Pipeline.Workspace)/CI/VSInsertion-windows/Vsix
              dropName: $(VstsDropNames)
              accessToken: $(System.AccessToken)
        - task: 1ES.PublishNuget@1
          displayName: üì¶ Push VS-repo packages to VS feed
          inputs:
            packagesToPush: '$(Pipeline.Workspace)/CI/VSInsertion-Windows/*.nupkg'
            packageParentPath: $(Pipeline.Workspace)/CI/VSInsertion-Windows
            allowPackageConflicts: true
            publishVstsFeed: VS
        - task: MicroBuildInsertVsPayload@5
          displayName: üè≠ Insert VS Payload
          inputs:
            TeamName: $(TeamName)
            TeamEmail: $(TeamEmail)
            InsertionPayloadName: $(Build.Repository.Name) $(Build.BuildNumber)
            InsertionBuildPolicies: Request Perf DDRITs
            InsertionReviewers: $(Build.RequestedFor),Andrew Arnott
            AutoCompletePR: true
            AutoCompleteMergeStrategy: Squash
            ShallowClone: true
        - powershell: |
            $contentType = 'application/json';
            $headers = @{ Authorization = 'Bearer $(System.AccessToken)' };
            $rawRequest = @{ daysValid = 365 * 2; definitionId = $(resources.pipeline.CI.pipelineID); ownerId = 'User:$(Build.RequestedForId)'; protectPipeline = $false; runId = $(resources.pipeline.CI.runId) };
            $request = ConvertTo-Json @($rawRequest);
            Write-Host $request
            $uri = "$(System.CollectionUri)$(System.TeamProject)/_apis/build/retention/leases?api-version=6.0-preview.1";
            Invoke-RestMethod -uri $uri -method POST -Headers $headers -ContentType $contentType -Body $request;
          displayName: üóª Retain inserted builds
